---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: sonarr
  namespace: media
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      sonarr:
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/sonarr
              tag: 4.0.11@sha256:6d86fba05681ec03ebbeeae003e8fc863e3b4b42bdd45b5a3a3a369c1b616e61
            env:
              TZ: "Australia/Perth"
              SONARR__INSTANCE_NAME: Sonarr
              SONARR__PORT: &port 80
              SONARR__LOG_LEVEL: info
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 30
                  failureThreshold: 5
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 1Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: sonarr
        ports:
          http:
            port: *port
    ingress:
      app:
        enabled: true
        className: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: &host "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        # ingress:
        #   main:
        #     enabled: true
        #     className: "traefik"
        #     annotations:
        #       cert-manager.io/cluster-issuer: "letsencrypt-production"
        #       traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        #     hosts:
        #       - host: &host "sonarr.${SECRET_DOMAIN}"
        #         paths:
        #           - path: /
        #             service:
        #               name: main
        #               port: http
        tls:
          - hosts:
              - *host
            secretName: "sonar-${SECRET_DOMAIN//./-}-tls"

    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config
        globalMounts:
          - path: /config
      tmp:
        type: emptyDir
      media:
        enabled: true
        type: nfs
        server: k3s-worker03.shadowkrusha.net
        path: /srv/nfs4/media
        globalMounts:
          - path: /media
